韩立刚计算机网络
https://pan.baidu.com/s/1bQWeuy   密码：iymd

https://pan.baidu.com/s/1Bh8dAO-bLWaO_xk7MN7E5w 密码：63cl


0001.第1章 计算机网络概述--课程介绍.mp4
0002.第1章 计算机网络概述--计算机网络在信息时代的作用.mp4
0003第1章 计算机网络概述--Internet概述.mp4
0004第1章 计算机网络概述--Internet组成.mp4
0005第1章 计算机网络概述-- 计算机网络类别.mp4
0006第1章 计算机网络概述--计算机网络的性能指标.mp4
0007第1章 计算机网络概述--回顾.mp4
0008第1章 计算机网络概述--性能指标2.mp4
0009.第1章 计算机网络概述--OSI参考模型.mp4
0010.第1章 计算机网络概述--理解OSI参考模型.mp4
0011.第1章 计算机网络概述--OSI和网络排错.mp4
0012.第1章 计算机网络概述--OSI参考模型与网络安全.mp4
0013.第1章 计算机网络概述--计算机网络的体系结构.mp4
0014.第1章 计算机网络概述--虚拟机的网络设置.mp4
0015.第2章 物理层--物理层基本概念.mp4
0016.第2章 物理层--数据通信基础知识.mp4
0017.第2章 物理层--奈氏准则和香农公式.mp4
0018.第2章 物理层--物理层下面的物理媒体.mp4
0019.第2章 物理层--回顾.mp4
0020.第2章 物理层--频分复用技术.mp4
0021.第2章 物理层--时分复用技术.mp4
0022.第2章 物理层--码分复用技术.mp4
0023.第2章 物理层--数字传输系统.mp4
0024.第2章 物理层--宽带接入技术.mp4
0025.第3章 数据链路层--数据链路层几个基本概念.mp4
0026.第3章 数据链路层--三个基本问题.mp4
0027.第3章 数据链路层--CRC差错检测技术.mp4
0028.第3章 数据链路层--PPP协议介绍.mp4
0029.第3章 数据链路层--PPP协议实现透明传输的2种方法.mp4
0030.第3章 数据链路层--PPP协议的工作状态.mp4
0031.第3章 数据链路层--配置路由器接口使用PPP协议封装.mp4
0032.第3章 数据链路层--回顾.mp4
0033.第3章 数据链路层--以太网特点.mp4
0034.第3章 数据链路层--CSMA CD.mp4
0035.第3章 数据链路层--以太网冲突检测和避让机制.mp4
0036.第3章 数据链路层--以太网.mp4
0037.第3章 数据链路层--集线器.mp4
0038.第3章 数据链路层--无冲突时以太网信道最大利用率.mp4
0039.第3章 数据链路层--以太网MAC地址.mp4
0040.第3章 数据链路层--回顾.mp4
0041.第3章 数据链路层--更改和查看MAC地址.mp4
0042.第3章 数据链路层--以太网帧格式.mp4
0043.第3章 数据链路层--抓包工具排除网络故障.mp4
0044.第3章 数据链路层--以太网帧格式2.mp4
0045.第3章 数据链路层--网桥和交换机优化以太网.mp4
0046.第3章 数据链路层--查看交换机ＭＡＣ地址表.mp4
0047.第3章 数据链路层--生成树过程.mp4
0048.第3章 数据链路层--更改交换机生成树的根 优先级.mp4
0049.第3章 数据链路层--远程重启服务器.mp4
0050.第3章 数据链路层--验证VLAN.mp4
0051.第3章 数据链路层--VLAN干道链路和访问链路.mp4
0052.第3章 数据链路层--扩展以太网.mp4
0053.第3章 数据链路层--交换机上实现的接入安全.mp4
0054.第4章 网络层--网络的两种服务虚电路和数据报服务.mp4
0055.第4章 网络层--虚电路和数据报服务的对比.mp4
0056.第4章 网络层--虚拟互联网.mp4
0057.第4章 网络层--IP地址 网络部分和主机部分.mp4
0058.第4章 网络层--IP地址 ABCDE类IP地址.mp4
0059.第4章 网络层--IP地址 十进制和二进制关系.mp4
0060.第4章 网络层--IP地址 ABCD类网络和默认子网掩码.mp4
0061.第4章 网络层--IP地址 保留的地址.mp4
0062.第4章 网络层--子网掩码的作用.mp4
0063.第4章 网络层--IP地址 将一个C类网络等分成两个子网.mp4
0064.第4章 网络层--IP地址 将一个C类网络等分成四个子网.mp4
0065.第4章 网络层--IP地址 将一个C类网络等分成八个子网.mp4
0066.第4章 网络层--IP地址 点到点网络的子网掩码最好是252.mp4
0067.第4章 网络层--IP地址 划分子网的规律.mp4
0068.第4章 网络层--IP地址 变长子网划分.mp4
0069.第4章 网络层--IP地址 变长子网练习.mp4
0070.第4章 网络层--IP地址 子网划分回顾.mp4
0071.第4章 网络层--IP地址 B类网络子网划分.mp4
0072.第4章 网络层--IP地址 利用超网合并网段.mp4
0073.第4章 网络层--数据包转发过程MAC地址和IP地址.mp4
0074.第4章 网络层--基于MAC地址控制代{过}{滤}理服务器只能控制本网段计算机.mp4
0075.第4章 网络层--ARP协议工作机制.mp4
0076.第4章 网络层--arp欺骗的应用.mp4
0077.第4章 网络层--如何断定ARP欺骗.mp4
0078.第4章 网络层--逆向ARP 就是计算机请求IP地址的过程.mp4
0079.第4章 网络层--逆向ARP 就是计算机请求IP地址的过程.mp4
0080.第4章 网络层--数据包首部.mp4
0081.第4章网络层--数据包首部生存时间TTL.mp4
0082.第4章 网络层--数据包首部 首部校验和.mp4
0083.第4章 网络层--通过抓包工具分析数据包首部.mp4
0084.第4章 网络层--网络畅通的条和静态路由.mp4
0085.第4章 网络层--添加静态路由.mp4
0086.第4章 网络层--Windows网关就是默认路由.mp4
0087.第4章 网络层V--网络负载均衡.mp4
0088.第4章 网络层--ICMP协议ping和pathping.mp4
0089.第4章 网络层--RIP协议工作原理.mp4
0090.第4章 网络层--配置动态路由RIP协议.mp4
0091.第4章 网络层--回顾.mp4
0092.第4章 网络层--OSPF协议特点.mp4
0093.第4章 网络层--配置OSPF协议.mp4
0094.第4章 网络层--BGP协议实现自制系统之间最佳路径选择.mp4
0095.第4章网络层--v{过}p{滤}n的功能.mp4
0096.第4章 网络层--创建v{过}p{滤}n拨号连接.mp4
0097.第4章 网络层--验证v{过}p{滤}n拨号.mp4
0098.第4章 网络层--站点间v{过}p{滤}n.mp4
0099.第4章 网络层--NAT和PAT.mp4
0100.第4章 网络层--虚拟机的网络设置.mp4
0101.第4章 网络层--回顾.mp4
0102.第4章 网络层 NAT的端口映射.mp4
0103.第5章 传输层--TCPIP协议分层.mp4
0104.第5章 传输层--TCP和UDP的应用场景.mp4
0105.第5章 传输层--传输层协议和应用层协议之间的关系.mp4
0106.第5章 传输层--服务和应用层协议之间的关系.mp4
0107.第5章 传输层--安装telnet客户端.mp4
0108.第5章 传输层--更改服务器的默认端口.mp4
0109.第5章 传输层--Windows防火墙的作用.mp4
0110.第5章 传输层--TCPIP筛选实现服务器安全.mp4
0111.第5章 传输层--Windows防火墙的作用.mp4
0112.第5章传输层--Windows防火墙不能防控灰鸽子木马程序.mp4
0113.第5章 传输层--IPSec严格控制网络流量.mp4
0114.第5章 传输层--UDP协议.mp4
0115.第5章 传输层--TCP可靠传输的机制.mp4
0116.第5章 传输层--流量控制功能.mp4
0117.第5章 传输层--滑动窗口和选择性确认.mp4
0118.第5章 传输层--滑动窗口和选择性确认.mp4
0119.第5章 传输层--滑动窗口技术.mp4


电子科技大学
https://www.uestc.edu.cn/
sniffer 捕获报文的软件

广播地址 不能作为源
全0地址  不能作为目的地址
网络地址 不能作为源或目的地址

重新看：6集(帧的结构,信号冲突)
重新看：12集(掩码) -- 重要
重新看：14集(超网) -- 不太熟
重新看: 27~29 -- 拥塞窗口
重新看: 31集 的有限状态机
重新看: 38集 OSPF协议
重新看: 39集 BGP-4 协议

二进制换算有一个技巧：算 2^0+2^1+...+a^n = (a^(n+1))-1

* 协议(protocol)
   - 一组控制数据通信的规则
   - 语法 syntax 语义 semantics 时序 timing
   - what how when

* OSI 参考模型(Open system interconnection 开放系统互连)
   - 是由 ISO 组织制定的参考模型
   - Reference Model 参考模型(这是一个 网络系统结构的概念模型)
   - 目的：使两个不同的系统能够通信,而不需要改变底层的硬件或软件逻辑
   - 层次
      7. Application(应用层)(传输单元为数据)
      6. Presentation(表现层)(传输单元为数据)
      5. Session(会话层)(传输单元为数据)
      4. Transport(传输层)(传输单元为报文段或数据段)
      3. Network(网络层)(传输单元为分组)
      2. Data Link(数据链路层)(传输单元为帧)
      1. Physical(物理层)
   - 层次的划分
      - 7~5 应用支持层(软件)
      - 4 传输层
      - 3 因特网
      - 2~1 网络接入层
 
   - 每一层对数据的处理
      - 协议数据单元 PDU(Protocol Data Unit)
      - 数据层除了加了一个头部信息外还加了一个 帧
      - 数据链路层 加了 帧(Frame)
      - 网络层 加了 分组(Packet)
      - 传输层 加了 数据段(Segment)

* 网络
   - LANs(局域网)
   - MANs(城域网)
   - WANs(广域网)

* 编址
   - 三种地址的分类
      - 物理地址
         - 通信节点
         - 节点所属LAN或WAN指定
         - LAN或WAN内唯一
         - 地址/硬件地址
         - 0x005.5D06.1418
         - 物理网络的地址特性是不一样的,但在所在的局域网或广域网内是唯一的
            - 物理地址往往在一个网络内经过解析后明确具体的主机
      - ip地址
         - 标识通信节点的网络连接
         - Internet指定
         - Internet内唯一
         - 网络地址
         - 202.115.12.34
      - 端口地址
         - 标识通信进程
         - 操作系统指定
         - 一台计算机的唯一
         - 21,23,25,80
         - 8080,10000

   - 目的地址的分类
      - 单播
         - 一个接收者,例如0x0005.5D06.1418, 202.115.12.34
      - 多播
         - 一组接收者,例如0x0100.5E00.0002,224.0.0.2
         - 多播地址的 前面必须是 0x0100.5E
      - 广播
         - 网络中的所有系统
         - 例如：0xFFFF.FFFF.FFFF,255.255.255.255

* TCP/IP 的版本
   - Version 4
      - 地址空间不足和低效率：32位的地址
      - 对服务质量和安全等方面支持较弱
   - Version 5
      - 基于OSI模型
      - 层次改变大,代价高,没有实际使用
   - Version 6
      - 仅改动了网络层协议：IPv6、ICMP
      - 扩大了地址空间：128位的地址
      - 改进了版本4的弱点

* 底层网络技术
   - 传输介质
   - 局域网
   - 交换
   - 广域网
   - 连接设备

* 传输介质
   - 有线介质 -- 导线管(导向媒体)
      - 双绞线
      - 同轴电缆
      - 光纤
   - 无线介质 -- 电磁波(非导向媒体)
      - 8 个频段
      - VLF LF MF HF VHF UHF SHF EHF
        3KHz 30KHz 300KHz 3MHz 30MHz 300MHz 3GHz 30GHz 300GHz

* 局域网
   - 允许一些独立设备在受限地理范围内彼此能够直接通信
   - 共享介质 -- 广播式
   - 实现此技术的三种方式
      - LAN技术                接入方法   地址bytes   速率bps           帧
      - Ethernet(以太网技术)   CSMA/CD    6           10M,100M1000M,10G 数据帧
         - 是发送方监听信道是否被占用,没有占用则发送,否则一直等到未占用则发送
      - Token Ring             令版传递   6           4M,16M            数据帧,令牌帧,异常终止帧
      - FDDI                   令牌传递   2或6        100M              数据帧,令牌帧

* Ethernet 帧格式 ------------------ 重看第6集
   - Ethernet 封装(RFC 894)
      - 以太网的帧中的数据长为 [46,1500] 字节范围
       
* 交换
   - 互互用于广域网或城域网
   - 交换系统
      - 有多个输入和输出的“黑盒子”
      - 电路交换
         - 建立连接->数据传输->拆除连接(比如电话系统)
      - 分组交换
         - 数据报
            - A和B之间的数据传输,数据会分组而经过不同的路径到达终点,所以B接收到的数据顺序可能不一致,且中途可能产生数据丢失
         - 虚电路
            - A和B之间建立传输路线连接,然后传输数据,最后拆除连接
            - 与电路交换的区别
               1. 电路交换是整个数据的传输,可以说是以流的形式传输
               2. 分组交换是把数据以分组的形式为单位进行传输的
               3. 电路交换的路线是一条实实在在的物理性的电路,而虚电路的路线是一条逻辑上的电路
      - 报文交换
         - 根数据报的发送方式很相像,但是发送的是报文,以报文为单位发送的

* 广域网
   - 在一个很大的地理范围内提供数据,话音和视频信息的长距离传输
   - 交换网络 -- 点到点式
      - 电路交换,分组交换

* LAN vs. WAN
   - LAN 使用自己的通信设施
   - WAN 利用公用的,租用的或专用通信设施

* 连接设备
   - 设备介绍
      - 转发器 Repeater / 集线器 Hub
      - 网桥 Bridge / 交换机 Switch
      - 路由器 Router
      - 网关 Gateway
   - 功能介绍
      1. 转发器/集线器 作用是物理上的,且是对数据bit流的再生和放大传输(集线器和转发器的区别仅仅是端口的多少)
         - 只提供数据的物理传输,但是会影响带宽,对于局域网来说会影响广播
         - 在 物理层 发生数据传输
         ```
         A -*- B -* 集线器 *- E -*- F
            |                    |
            C                    H
         A B C E F H 共用一个带宽
         ```
      2. 网桥/交换机 都是基于机器内部的地址表进行数据转发操作或判决(网桥和交换器区别是,网桥是由软件决定的,交换机是由硬件决定的)
         - 还解决了多台设备在同一个物理连接上占用相同带宽的情况,网桥/交换机可以把带宽分开
         - 网桥/交换机 必须是在数据链路层上必须有公共的特性
         - 在 数据链路层 发生数据转发(且包含物理层)
         ```
         A --- B -*  *- E --- F
                  |  |
                 交换机        
                  |  |
         C --- D -*  *- G --- H
         A B C D 为一组 和 E F G H 一组 这两组共用一个带宽
         ```
      3. 路由器
         - 可以连接不同的网络性质的网络
         - 在网络层发生数据转发(且包含数据链路层,物理层)
      4. 网关
         - 往往处于不同协议栈的使用

* IP编址
   1. ip地址就是通用标识符
      - 唯一标识互联网上的主机或路由器
      - 路由器是用于连接不同的网络的
         - 所以路由器可以有多个ip地址
         - 因为连接的每一个网络接口而言都有一个ip地址
   2. 主机标识符
      - Name: 是什么,可读性强
      - Address: 在哪里,软件效率高
      - Route: 怎样到达
   3. IP 地址的分类
      - Ipv4 是 32 bit 二进制地址
         - 由 Network id + Host id 共同组成(即网络号和主机号共同组成)
      - Ipv4 的不同分类(以下会以 二进制 和 点分十进制表示)
         - A类 0 7位二进制 24 位主机号
            - 0.0.0.0 ~ 127.255.255.255
         - B类 10 14位二进制 16位主机号
            - 128.0.0.0 ~ 191.255.255.255 
         - C类 110 21位二进制 8位主机号
            - 192.0.0.0 ~ 223.255.255.255 
         - D类 1110 24位(Multicast) 一般用于多播使用
            - 224.0.0.0 ~ 239.255.255.255 
         - E类 11110 27位(Reserved) 一般用于实验使用
            - 240.0.0.0 ~ 255.255.255.255 
   4. 多接口设备
      - 多接口(多接口的计算机,也可能是路由器)
         - 可以连接到多个网络
         - 每个网络连接分配一个 ip 地址,可属于不同的类;
         - 对于多接口的计算机来说,可以连接到多个连接当中也可以连接到同一个网络当中
            - 对于计算机来说,连接到多个网络,多个网络之间不能进行通信,因为计算机只起到终端的作用
      - 路由器
         - 必须连接到多个网络
         - 每个网络连接分配一个ip地址,可属于不同的类
         - 路由器的多个接口不能连接到一个网络当中,只能接在不同的网络中,因为路由器的网络不明白走哪个接口
            - 虽然路由器的一个接口可以连接不同的网络,但是不同的网络之间是不能互相通信的(这就是路由器的一个接口只能连到一个网络的缘由)

   5. Netid(物理网络)
      - 每个ip 就是由 Netid+Hostid 组成的
      - 换句话说就是：ipv4是由 网络地址 + 主机号组成

   6. 特殊地址
      网络地址           Netid    Hostid 源/目的地址
      网络地址           特定的   全0    都不是
      直接广播地址       特定的主 全1    目的地址
      受限广播地址       全1      全1    目的地址
      本网络上的本主机   全0      全0    源地址
      本网络上的特定主机 全0      特定的 目的地址
      环回地址           127      任意   目的地址
   7. A 类地址很特殊,因为 本网络上的本主机,环回地址 其实就是占用了 A 类地址的两种情况
   8. 特定的：不是全0 也不是全1
      - 网络地址
         - Netid：特定的,Hostid：全为0
         - 表示一个网络
      - 直接广播地址(特定网络当中的所有主机)
         - Netid：特定的,Hostid：全为1 
         - 表示特定网络当中的所有主机
      - 受限广播地址(本地广播地址)
         - 255.255.255.255
         - 只在源以内的范围广播,并且这个网络到达了路由器就不会再把消息发送到其它网络了
            - 假设有两个网络 A 和 B 连在了 路由器上,那么 A 网络产生的一个 受限广播地址分组的信号 255.255.255,那么 A 网络和 路由器都会收到这个信息(但是路由器收到了之后并不会传送到 B,这符合 只在源以内的范围广播)
            - 这种方式和直接广播地址处理方式一样,注意两者的路由器在收到信号后并不会把信息重复再发送到源
            - 直接广播和受限广播的区别,作用一样,但是受限广播只限制在本网络里,而直接广播是对指定网络的广播
      - 本网络上的本主机
         - 0.0.0.0
         - 例如：设备A <--> 216.45.7.0 网络 <--> 216.45.7.126 引导服务器(DHCP Server)
            - 因为设备A要从 DHCP Server 中自动获取被分配的Ip地址,所以需要发送信号
            - 即 源：0.0.0.0 ,目的地址：255.255.255.255 这样引导服务器可以给予响应
      - 本网络上的特定主机
         - Netid 全0,并且 Hostid 非全0也非全1
         - 如果几台主机：216.45.7.20, 216.45.7.64, 216.45.7.126 和 A 主机
            - A 主机发送了信息 0.0.0.64给本网络,则信息会被发送到 216.45.7.64
      - 环回地址
         - 最前面的字节为 127,其它的部分特定值 例如：127.?.?.?
         - 案例
            应用层    process1  process2
            传输层       TCP or UDP
            网络层           IP
            链路层      Network Access
         - 如果一台主机发送了信号  127.?.?.? 那么数据从 Process1 发送到 TCP or UDP 再到IP
           那么信息会从 IP 层反向到 Process2,不会到达链路层,一般用户机器的软件测试,只会发生在机器自身,不会发生在网络上
   9. 路由器的一个接口接在两个 ip 网上的可能性
      - 例子1
         路由器 --- 交换机 ----- A
                    |    |
              C------    ------- B
              D-----|
              E-----|
         A和B一个网络,C和D和E一个网络
         尽管 这几台机器都在一个物理连接图上,但是逻辑网络不一样所以不能通信
      - 例子2(等效于例子1)
         C      路由器        A
         |_________|__________|
         |   |                |
         D   E                B
         AB一个网络,CDE一个网络,通信和例子1同理
      - 在一个以太网上,网络不同仍不能通信,*********** ip协议和ARP协议时会解释 ************
   10. 路由器的多个接口接在一个 ip 网络上的可能性
      - 是不可能的,原因是ip分组的选路：基于ip网络的选路的 
      - 路由器收到一个ip分组后,是根据ip网络选路的,如果多个接口接在同一个网络上,在选择的时候会有歧义
         1. 是选择所有连接的接口都发送报文 
         2. 选择一个接口进行发送报文(以什么算法进行选择？)

   11. 这两种情况的可能与不可能的原因,因为：ip地址 -- 网络层,标识网络连接(这个网络连接是逻辑连接非物理连接)
      - 一个物理连接可以有多个逻辑连接,多个物理连接不能共用一个逻辑连接
   12. 单播,多播,广播
      - 单播(Unicast)
         - 通信：一对一,源或目的地址
         - 因特网上的所有系统必须至少有一个唯一的单播地址
         - 可以是 A, B ,C类网络
      - 多播(Multicast)
         - 通信：一对多,目的地址
         - 因特网上的系统可以有一个或多个多播地址
         - 是 D 类,本地级或全局级(本地级是一个网络内,全局级可以是多个不同的网络)
      - 广播(Broadcast)
         - 通信：一对所有,目的地址
         - 受限广播和直接广播,本地级(只能是一个网络内)
   13. 标识网络连接的ip地址数目
      - 对于 A 类网络,Netid 全0 表示本网络的本主机,Netid全1 表示环回地址 所以2^7-2
      - 类别      网络数           主机ip数/网络
         A        2^7-2 = 126       2^24-2 = 16777214
         B        2^14 = 16384    2^16-2 = 65534
         C        2^21 = 2097152    2^8-2 = 254  
   14. 专用网络
      - 不需要接入 Internet,但需要用 TCP/IP 通信
         - 编址方案
            - 申请,并使用 A, B, C 类地址(全局唯一)
            - 不申请,直接使用 A, B, C 类地址(本组织唯一,全局不唯一)
            - 不申请,直接使用专用地址(本组织唯一,全局不唯一)
         - Private address,私有地址(所以一般用 nat 技术把私有网络转换为全局ip进行请求)
            - 为了避免对ip地址的分配不足,所以以nat技术把内网地址转为外网地址的技术
            - 所以把一些固定段位的的地址作为 内网地址来使用
            - A类 10.0.0.0 ~ 10.255.255.255          1 种网络地址
            - B类 172.16.0.0 ~ 172.31.255.255        16(31-16+1) 种网络地址
            - C类 192.168.0.0 ~ 192.168.255.255      256(255-0+1) 种 网络地址

* 构成子网和超网
   - Classful IP 编址的缺陷
      - C类 少于 255 台主机的网络
      - B类 介于 255 ~ 65535 台主机的网络
      - A类 超过 65535 台主机的网络
   - 解析原由
      - 假如有100台设备要组成一个全局网络,按最小网络ip损耗则该选B类网络,但是仍有上万个ip被浪费
      - 解决方案：采用无类 IP 编址(Classless IP)
         - 子网划分Subnetting
            - 概念
               - 将一个 IP 类网划分成几个较小的子网(subnet)
               - 多个物理网共享同一个IP类网前缀(即只根据Netid无法判断是否属于同一个网络内)
               - 形式：Netid+Hostid => Netid+Subnetid+Hostid(即把以前的Hostid分成了Subnetid 和 Hostid)
               - Subnetid 的长度是不固定的
            - 例子
               - 一个B类网络ip为 141.14.0.0 被划分成了三个子网
               - Subnet 141.14.2.0 
                  - 141.14.2.20
                  - 141.14.2.21
                  - 141.14.2.10                 
               - Subnet 141.14.7.0
                  - 141.14.7.45
                  - 141.14.7.44
                  - 141.14.7.96
               - Subnet 141.14.22.0
                  - 141.14.22.8
                  - 141.14.22.9
                  - 141.14.22.64
            - 子网掩码(Mask)
               - Subnetting
               - 更适合于物理网的实际大小
                  - 不能再用首字节判定网络大小
                  - 字节边界没有意义,仅用在点分十进制表示法中
               - 表示网络或子网的大小
                  - 32 bits 二进制数
                  - 位的值为1：网络位 即 网络(Netid)或子网(Netid+Subnetid)部分
                  - 位的值为0：主机位 即 主机部分(Hostid)
               - 例子：202.115.12.0 => 11001010 01110011 00001100 00000000
                  - 以十进制看是C类地址 以首字节判断是C类地址
                  - Mask 255.255.255.255.0 => 11111111 11111111 11111111 00000000 此时的地址分配个数有 2^8=256 个
                  - 若Mask为 11111111 11111111 11111111 11000000 则此时的地址分配个数有 2^6=64 个
            - 网络
               - 物理网络：LAN、WAN -- OSI 模型第一,二层
               - 网络：IP网络 -- OSI 模型第三层
                  - 之前的网络只是指分类网络,之后的网络如果没有指定则可能是指分类网络或子网
                  - 网络(Major network): A, B, C类网络
                  - 子网(Subnet): 划分子网后的网络
            - 掩码(Mask)
               - 子网掩码：Netid + Subnet id
               - 默认掩码：Netid
            - 子网中的特殊地址
               - Netid            Hostid
                 Not al 0s or 1s  Not all 0s or 1s
               - 网络地址
                  - Netid 特定
                  - 全0 Subnet id + 全0 Hostid 全1 -> 网络广播地址(直接广播地址)
               - 子网地址
                  - 特定 Netid + 特定 Subnet id
                  - 全0 Hostid                 全1 -> 子网广播地址(直接广播地址)
               - 主机地址
                  - 特定 Netid + 特定 Subnetid + 特定 Hostid
            - 不连续掩码
               - 不连续掩码
                  - 0, 1 混杂在一起
                  - 使网络构成和路由选择变得复杂 -- 不实用
                  - 例如：11111101 11101110 11110111 01111110
               - 推荐使用连续掩码(通常使用的是连续掩码)
                  - 例：11111111 11111111 11111111 11000000
            - 掩码表示
               - 255.255.255.192
               - Netid+Subnetid = 26bits, Hostid = 6bits
               - 位数表示
                  - /26
                  - 1 bit 的个数
               - 一个公式
                  - 这个公式表示掩码占用了 0~8 位时,相应的一个字节的表示的数的大小
                  - 如果一个网络地址位中的某个字节如果不是以下数字时,那么肯定不是掩码
                  - 0, 128, 192, 224, 240, 248, 252, 254, 255
                   /0, /1 , /2 , /3 , /4 , /5 , /6 , /7 , /8
            - 掩码的运算(位与运算)
               - Net address = IP address & Mask
               - Host address = IP address & Mask(取反)
               - Address range = {Net address, Net address + Mask(取反)}
               - 例子：
                  - 条件：IP address = 200.6.12.55, Mask = 255.255.248.0
                  - 求Net address    =  200.6.12.55 & 255.255.248.0 = 200.6.8.0
                     - 200.6.12.55   => 11001000 00000110 00001100 00110111
                     - Mask          => 11111111 11111111 11111000 00000000
                     - Net address   => 11001000 00000110 00001000 00000000
                  - 求Host address   =  200.6.12.55 & 0.0.7.255 = 0.0.4.55
                     - 200.6.12.55   => 11001000 00000110 00001100 00110111
                     - Mask取反      => 00000000 00000000 00000111 11111111
                     - Host address  => 00000000 00000000 00000100 00110111
                  - 求Address range = {200.6.8.0, 200.6.15.255} 即 {第一个网络地址, 第一个网络地址 + 掩码的取反} 
            - 掩码的运算（求主机地址,子网广播地址,子网地址
               - X.Y.Z.0,  X.Y.Z.8,  X.Y.Z.15, X.Y.Z.31, X.Y.Z.96
               - 00000000, 00001000, 00001111, 00011111, 01100000 
               - 子网掩码为 255.255.255.255.224 => 11100000
               - 得出结论为：
                  - 子网地址：X.Y.Z.0, X.Y.Z.96
                  - 子网广播地址：X.Y.Z.31
                  - 主机地址：X.Y.Z.8, X.Y.Z.15
            - 子网的定长划分(Fix length subnetting)
               - 共享同一个 ip 网络前缀的子网大小相同
               - 划分依据：子网数量与子网内主机数量折中
               - 特点：划分简单,地址分配较浪费
            - 变长子网划分(Variable length)
               - 共享同一ip网络前缀的子网大小不同
               - 划分依据：子网内的主机数量
               - 特点：灵活,高效利用地址空间
               - 变长子网掩码(Variable-Length Subnet Mask, VLSM)
               - 例子
                         路由器
                      Net1  |  25
                     ---------------------
                     |                   |
                   路由器                路由器   
                  3  | Net2              |  Net3    
                 ----------            --------
                   |Net4  |Net5         50
                 ------  ------    
                  40        60

                  - 定长划分
                     - Net1 = 25 + 3 + 2 = 30
                     - Net2 = 3 + 3 + 2 = 8
                     - Net3 = 50 + 1 + 2 = 53
                     - Net4 = 40 + 1 + 2 = 43
                     - Net5 = 60 + 1 + 2 = 63
                     - 本子网内主机数 + 本子网内路由器接口数 + 2(这个2是两个特殊地址,即全0和全1)
                     - 划分时要以最大的进行划分,即 63
                     - 得出 Mask = 255.255.255.192
                     - 每个ip子网的实际ip数量：64
                     - ip地址总空间：5(子网个数) * 64 = 320
                        - 这造成了C类网络不满足,可能需要两个C类或一个D类网,这样相对于Net1或Net2来说浪费太多
                        - 因为一个子网上就有64个ip了,所以Net2浪费了 64-8=56
                     - Net1: 10.1.0.0/26
                     - Net2: 10.1.0.64/26
                     - Net3: 10.1.0.128/26
                     - Net4: 10.1.0.192/26
                     - Net5: 10.1.1.0/26
                  - 变长划分
                     - Net1 Mask=/27(因为30个地址只需要 2^5 即可,占5位,所以Netid占27位,Hostid 占 5 位总共可以分配32个地址,以下的同理)
                     - Net2 Mask=/29(因为8个地址只需要 2^3 即可,占3位,所以Netid占29位,Hostid 占 3 位总共可以分配8个地址,以下的同理)
                     - Net3 Mask=/26
                     - Net4 Mask=/26
                     - Net5 Mask=/26
                     - ip地址总空间：32+8+64+64+64 = 232(这里每个相加的数为 主机的个数,例如第一个32为 2^5)
                     - Net1: 10.1.0.0/27         10.1.0.0 ~ 10.1.0.31
                     - Net2: 10.1.0.32/29        10.1.0.32 ~ 10.1.0.39
                     - Net3: 10.1.0.128/26       10.1.0.64 ~ 10.1.0.127
                     - Net4: 10.1.0.64/26        10.1.0.128 ~ 10.1.0.191
                     - Net5: 10.1.0.192/26       10.1.0.192 ~ 10.1.0.255
                     - 可以发现ip地址的范围：Net1到Net2是连续的,Net3到Net5是连续的,Net2和Net3之间不连续
                        - 0~31~32~39是Net1到Net2 64~127~128~191~192~255 是Net3到Net5 可以看出是连续的
                        - Net3的ip地址范围可以是 10.1.0.40 ~ 10.1.0.103 吗？
                           - 40 => 00101000, 103 => 01100111
                           - 二进制对比相同的只有最高位,意味着应该是 /25,但是 Net3 要求是 /26所以对比发现hostid不一致
                           - 40的二进制 最后七位不是全0,103最后七位不是全1,以至于不能形成一个网络地址到广播地址的性质,所以不符合

                   - 一个网络的划分例子
                             路由器
                      Net2   |     <--------- IP地址：10.1.0.33 掩码：255.255.255.248
                             |
                      -----------
                            |
                            |      <--------- IP地址：10.1.0.34 掩码：255.255.255.248
                            路由器
                            |      <--------- IP地址：10.1.0.127 掩码：255.255.255.192
                      Net4  |
                      -----------
                         |
                         主机      <--------- IP地址：10.1.0.130 掩码 255.255.255.192 默认网关 10.1.0.129
                   - 主机的默认网关：接入主机所在IP网络的路由器接口的IP地址
                   - 一个有效的网络段(去掉特殊的两个ip地址),通常把有效段的第一个或最后一个地址分配给 路由器
                    
         - 超网划分Supernetting
            - 将几个 C 类网合并成一个更大的地址范围(构成超网的的子网只能是 C 类网)
            - 方法将 Netid 中的某些 1 改为 0
            - Net id + Host id => Supernet id + Host id
            - 子网：构成：主机号 -> 子网号        分类(Classful)
               - 地址分配 -> 一个物理网络
            - 构成：构成：网络号 -> 主机号        分类(Classful)
               - 地址申请 -> 一个组织(含多个物理网络)
               - 该组织可以在超网地址范围内,使用子网技术为内部的每个物理网络分配适当的ip地址空间 
               - 使用：路由聚合,即 CIDR (这只是一个技术不是协议,而且可以聚合不同类别的网络,不仅仅限于C类网络)
            - 例子：
               - 一个超网地址 X.Y.32.0
                  - X.Y.32.1, X.Y.32.2 ... X.Y.32.254
                  - X.Y.33.1, X.Y.33.2 ... X.Y.33.254
                  - X.Y.34.1, X.Y.34.2 ... X.Y.34.254
                  - X.Y.35.1, X.Y.35.2 ... X.Y.35.254
               - 规则
                  - 合并超网的 C 类网个数 N = 2^n(n=1,2,3...)
                  - 合并超网 C 类网必须是连续的
                  - 超网地址的第3个字节值 = n * N(n = 0,1,2...)
         - 子网：确定子网地址、子网广播地址、地址范围
         - 超网：确定超网地址、地址范围
     
* IP分组的将会和路由选择
   - 概念
      - 信息：IP分组
      - 节点：路由器 -> 选择路径,将会分组
      - 信道：物理网络 -> 传送 IP 分组

   - 一些名词
      - Delivery(交付)
         - 对分组的物理转发
      - Route(为分组寻找路由)
         - 两个单词的区别
            - Route 路由,路径(是一个名词)
            - Routing 路由 路由选择 选路(是一个动词)
         - Routed protocol：沿选定的路径交付分组
         - Routing protocol：寻找到达目的的最佳路径
      - IP 分组传输环境
         - 多个网络 -> 差异：通信能力、分组长度、延时
         - 多个路由器 -> 独立选路
         - 多条可能的路径
      - IP 通信 ---- 无连接通信
         - 多种网络都能满足的通信方式
         - 允许多种选路策略(如：带宽、延时)
      - 直接交付：分组目的与分组的发送接口在同一IP网络中(注意是分组发送接口不是分组源)
      - 间接交付：分组目的与分组的发送接口在不同IP网络中(注意是分组发送接口不是分组源)
   - 面向连接 通信过程(建立连接->交付分组->终止连接) 跌幅选择(仅在建立连接时选路) 传输路径(相同)
   - 无连接 通信过程(交付分组) 路由选择(每个分组独立选路) 传输路径(可以不同)

   - 交付
      - 交付方式判断：分组目的ip & 发送口掩码 是否等于 发送口ip & 发送口掩码(相等则是直接交付,不相等则是间接交付)
      - 交付操作 -- 地址映射：ip地址 -> 物理地址
         - 直接交付：目的ip地址 -> 物理地址
         - 间接交付：下一跳ip地址 -> 物理地址
      - 一次交付过程 
         - 0或多个间接交付 +1 个直接交付(最后的交付)
         - 分组：(源ip地址,目的ip地址)保持不变
         - 帧：(源物理地址,目的物理地址)逐跳改变 

   - 路由选择的方法
      - 思想
         - 不是收到ip分组后才为其选路,而是预先获得到所有目的的路由(Routing Protocol)
         - ip报文按预定的路由转发(Routed Protocol)
      - 预定路由：路由表
         - 转发表(forwarding table)
         - 主机和路由器都用路由表实现报文的发送,转发

   - 路由表
      - 一些概念
         - 路由表存储的内容大致有：目的网络地址(destination) -- 子网掩码(mask) -- 网关地址 -- Next Hop(下一跳ip地址,也可以说是一个接口ip地址,如果是直连路由,则这个值不存在或有直接路由的标识)
         - 路由表的目的网络地址是在这个路由器所联的一个互联体系的网络地址
         - 路由表的大小只与网络个数有关,而与主机个数无关
         - 路由器是独立选路,即A到B的路径可能与B到A的路径不是同一条路径
      - 路由表的工作原理
         - 路由中转的目的是：一个网络地址,而非一个主机
         - 如何到达目的：下一跳ip地址,而非全部路由

      - 几种不同的路由方式
         1. 直接网络 -> 直连路由
            - *** 直连路由 和 网络路由 是由下一跳区分的 ***
            - 由所在网络,根据所在网络的信息自推导出来的
            - 本机所在的子网掩码和目的ip地址相与的结果和本机所在的 网络地址相同
         2. 特定主机路由
            - *** 主机路由 和 网络路由 是由 目的地址的完整度区分的 ***
            - 作用和区别
               - 为某台主机单独指定一条路由
               - 掩码值全“1” --- 主机掩码(特定主机路由的 掩码是全“1”)
               - 作用：更多控制,投递路径,安全
               - 仅仅是 目的地址是 主机的ip地址而非主机的网络地址,掩码是全“1”
            - 会发现 目的ip不是一个网络地址,而是一个目的主机的ip地址 ,并且这条路由信息的 掩码是全“1”的
         3. 网络路由
            - 目的ip地址是在某一个间接交互的网络当中的
         4. 默认路由
            - 指定一默认路由器,当ip分组的目的网络没有在选路表中时,则把ip分组送给默认路由器
            - 目的网络地址：0.0.0.0
            - 目的网络掩码：0.0.0.0
            - 使路由表变得很小,隐藏大量的网络路由信息
            - 默认路由环路
               - 假设 A,B 两个路由,一个信息造成 A 传递给 B,B 传递给 A 造成死循环(造成这个原因是两个路由将对方设成默认路由)

      - 路由的选择
         - 路由表的选择顺序是：直连路由(即同一个网络内的) -> 主机路由(是一个具体的ip地址而非网络地址) -> 网络路由(具体的某个网络地址) -> 默认路由(不在路由表中应该走的路由方向)
         - 用ip分组中的目的ip地址查找路表,使用匹配表项的下一跳地址完成分组交付,匹配条件 DIP & Mask(i) = Net(i)
            - 即把 目的ip地址 和 每条信息的Mask相与,如果与的结果等于 对应那条信息的 Destination(这个记录的是一个网络地址,而非一个ip地址) 那么就匹配
            - 如此匹配也可能有多个匹配,所以只取匹配的第一个,所以有了严格的路由表的选择顺序：直接路由->主机路由->网络路由->默认路由
               - 从主机路由 到 默认路由 的掩码越来越短,表明范围越来越大
            - 先查直连网络 -> 再查非直连网络(非直连网络也要依据 先查范围小的,再查范围大的,即掩码从长到短的)
               - 根据路由表只能获得部分 拓扑信息,非直连路由信息的 destination 与自身所在网络的连接详情是无法得知的,因为可能中间有路由或通过路由的路由
         - 网上抄的路由匹配顺序
            - A.先匹配掩码,掩码最精确匹配的路由优先
            - B.如果有多条路由,则匹配管理距离,管理距离小的路由优先
            - C.如果管理距离相同,在匹配度量值,度量值小的优先
            - D.如果度量值相同,则选择负载均衡,具体的方式看采用哪种路由协议和相关的配置了。

* 网际协议(Internet Protocol)

   - 概述
      - 连接 vs. 可靠性
         - 连接,面向连接,无连接；可靠：差错控制、流量控制等；面向连接不一定保证可靠,无连接不一定不可靠；在连接上容易实现可靠性机制
      - IP通信
         - 无连接：跨越多个异构物理网 -> 通用性；不可靠：尽最大努力交付；可靠性问题交由高层协议解决 
   - IP数据组的内容格式(IP Datagram)
      - 网络层的数据分组的大小：Header(20-60 bytes) + Data  => Header+Data 的总大小为 20-65536 bytes

      - Header 部分的固定格式
         VER(4bits)    HLEN(4bits)    Service type(8bits)    Total length(16bits)
         Identification(16bits)    Flags(3bits)    Fragmentation offset(13bits)
         Time to live(8bits)    Protocol(8bits)    Header checksum(16bits)
         Source IP address(32bits)
         Destination IP address(32bits)
         Option(这部分可有可无)

      - Header 的分析
         - 首部长度字段 HLEN, 4 bits
            - 4 bytes 为单位
            - 所以表示的大小为 0 ~ 15,但 HLEN 表示的每个值逻辑上是表示的 4 字节(即32bits)
            - 因为 HLEN 取值只能是 5 ~ 15(即首部长度为 5*4 ~ 15*4 => 20 ~ 60 bytes)
            - 首部长度 最小20字节,最大60bytes,Option是可选的

         - 总长度字段,Total length, 16 bits
            - 包括 头部分和数据部分 的总共长度
            - 1 byte 为单位
            - Total length = 首部长度(即4*HLEN) + 数据长度
            - IP 分组的最大长度是 65535 = (2^16) - 1 = 也等于等比数列之和 a0+a1+...a15

         - 服务类型,Type of Service(TOS), 8bits
            - 该分组所期望的服务质量
            - Precedence(8bits)+D(1bit)+T(1bit)+R(1bit)+(Reserve)2bit
               - RFC 1349 规范中
                  - Precedence: 指示对分组进行处理(排除或丢弃)的优先权,值从0(普通优先级)到7(网络控制),目前未使用
                  - DTR: 该分组所希望的路由转发服务类型,不能同时设置,只能设其中一,即一位为 1 其它两位为 0(因为是希望,所以也可以是全0)
                     - D: Minimize delay(最小的延时)
                     - R: Maximize reliability(最大可靠性)
                     - T: Maximize throughtput(最大的吞量)
                  - (保留字段)Reserve => C(1bit)+U(1bit)
                     - 高位1bit C: Minimize cost(非bit,表示最小开销)
               - RFC 2474 规范中
                  - DSCP(6bits) + CU(2bit)
                  - Differentiated Services Code point (区分服务编码点) + Currently Unused(保留字段)

         - 分片控制字段
            - 标识字段,Identification, 16bits
               - 源站每发送一个分组,那么标识值 + 1
               - (源ip地址,标识) -> 全网唯一分组标识
            - 标志字段, Flags, 3bits
               - 1bit+D+M
                  - 1bit: 暂时未使用
                  - D: Do not fragment,如果为1表示当前分组不能分片
                  - M: More fragments, 如果为1表示当前分片不是最后一个分组,如果为0表示已经是最最后一个分组
            - 片偏移字段, Fragmentation offset, 13 bits
               - 以 8 bytes 为单位
            - 一个源可能发送多个分组,而一个分组可能被分片成多个分片,但是多个分片的某个片在经过物理网络时可能还会再分
               - 例：A组数据 分片为 A1, A2, A3 三个分片,而A2在经过某个物理网络时分为了 A21, A22
               - 那么 A1, A21, A22, A3 的 Identification 是一样的,因为都是同一个逻辑分组,虽然实际上 A21, A22是一个物理分组
               - 并且 以上的 是否是最后一个分组只有 A3 是,因为它们是一个逻辑分组,且最后一个逻辑分组是 A3
               - 片偏移也是根据原始逻辑分组的 数据偏移的

         - 生存时间字段,Time to Live(TTL), 8 bits
            - 分组寿命：防止路由成环时,IP被 无限次转发
            - 取值：分组传输时间+路由器转发处理时间 -> 困难
               - 分组传输时间： 路由器从一个节点到另一个节点的时间
               - 路由器从一个接口转发到另一个接口的时间：
            - 实际：源和目的之间的路由器个数(跳数)
               - 因为如果是实际的时间定义,因为网络的网速等原因会是一个动态时间,所以这里的生存时间实际上是指 源和目的之间的路由器个数(跳数)
            - 路由器转发时将TTL值减1,再判断值大小,TTL值为零时丢弃该分组(通常设置的是一个最大值,最大值上的大小由程序定义)
               - 如果下一跳刚好是目的主机,则不需要检测 TTL

         - 协议,Protocol, 8bits
            - 使用 IP 服务的高层协议
            - 1: ICMP 2: IGMP 4: IPv4 6: TCP 8:EGP 17:UDP 41: IPv6 89: OSPF

         - Checksum, 16bits
            - 差错检测
            - 只校验首部(即头部的所有),数据部分由高层协议校验
               - 无须重复校验数据部分
               - 缩短了路由器转发分组时的处理时间

   - IP分组封装
      - Ethernet 帧
         - 目的MAC(6 bytes) 源MAC(6bytes) 0x0800(2bytes)  IP Packet(46~1500bytes)  FCS(4bytes)
            - 是直接封装在 数据链路层的 数据部分(即 IP Packet 中)
            - 0x0800 表示是一个 ip 分组

   - 分片
      - 分片操作
         - 仅由 路由器 执行：转发分组时
         - 每个分片都要包含ip首部：无连接通信
         - 确实需要时才进行分片：提高传输效率
         - 数据报可被多次分片

      - 适应在不同 MTU 的物理网上传输
      - Frame: Header MTU Trailer
         - MTU 是数据帧中封装的最大数据长度
         - MTU 即 IP datagram 的总长度
         - 物理网 MTU
            Token ring(16Mbps) 17914
            Token ring(4Mbps) 4464
            FDDI 4352
            Ethernet 1500
            x.25 576
            ppp 296

      - 例子：
         - 若一个物理网中的 MTU 值为 620bytes,一个数据为 1400bytes,那么怎么分片
         - 600bytes + 600bytes + 200bytes 因为620bytes是包含ip头长的,所以应该去掉头部的 20bytes,所以一个MTU装的数据最多为 600bytes
         - Data1 + Data2 + Data3
         - M:1, M:1, M:0
         - offset=0, offset=600/8=75, offset=1200/8=150

   - 重组操作
      - 源ip地址 和标识 都一样才表示是一个ip的一个分组
      - 仅由 目的主机执行,将数据递交给上层时
      - ip的无连接通信 -> 各分片的传输路
      - 有重组时限
      - 若丢失分片,则无法重组ip分组
      - 重组表
         - St.: State
         - S.A.: Source address
         - D.I.: Datagram ID
         - T.O.: Time-out
         - F.: Fragments
         - 样式： St. S.A. D.I. T.O. F.

   - IP网络层 头 信息的可选项
      - 一个分组可以有多个可选项
      - 一般用于 网络测试或调试
      - 0~40bytes
      - Code(8 bits) Length(8bits) Data(variable length)
         - Code: Copy(1bit) Class(2bits) Number(5bits)
            - Copy: 0 仅复制在第一个分片 1 复制到所有分片
            - Class 00 数据报控制 10 调试和管理
      - 选项类型
         - 单字节
            - 无操作
            - 选项结束
         - 多字节
            - 记录路由
            - 严格源路由
            - 松散源路由
            - 时间戮

   - 校验和(Checksum)
      - RFC 1071(RFC 1141, 1624, 1936)
      - 举例
         Sender                                                 Receiver

         section 1    16bits                                  16bits  Section1
         section 2    16bits                                  16bits  Section2
         Checksum     All 0s                                  16 bits Checksum
         Section k    16 bits                                 16bits  Section k
                                =>    16 bits Checksum  <=                        
         Sum          16bits                                  16 bits Sum
              取反                                                取反
         Checksum     16bits                                  16bits Result
      - 说明：发送方将将校验数据以 16bits 为单位分割为若干段,将每一段相加(是有进位的方式相加),结果取反
         - 计算之前 校验和字段 值为0再计算,计算完后将结果置于校验 位
         - 接收方以 16bits 为单位分割,相加的结果看是否为 0,如果为0则正确
      - 反码计算,两个值相加,如果超过了容纳位,则超过的位加到最后低位,如果还有超过了容纳位则同理

   - IP数据的接收情况
      - 主机,IP层接收到信息后验证 目的地址是否和自己一样,一样则递交给重组模块,不一样则丢弃
      - 路由器,IP层接收到信息后验证 目的地址是否和自己一样,一样递交给重组模块,不一样则转发


* ARP 和 RARP
   - 互联网：IP地址  Network     物理网：物理地址 Data Link, Physical
   - 一个帧的信息为：目的mac 源mac 类型 IP Packet FCS,然而只靠IP网络是无法知道 目的mac 的,所以需要其它方式得到mac地址才能进行封装
   - 逻辑地址 => 物理地址
      - 可以建立映射表,而方式有静态映射表和动态映射表
         - 一般很少使用,因为对于有线连接的网络,mac可能因为换网卡而改变mac；无线连接虽然mac基本不变,但是ip可能因为切换到不同网络而ntyo
      - 动态建立映射表(即 ARP 协议)
         - ARP 实现原理：因为知道了目的主机的ip地址,则向指定网络发送一个广播地址信息,信息中带有目的主机的ip地址,那个网络中接收到信息的(ARP 只能发生在一个物理网当中)
         - 主机验证自己的ip是否和接收到的ip地址相同,相同则把自己的mac地址封装为响应报文 以单播的形式返回,得到mac地址后建立 ip地址和mac地址的映射表
         - ARP 分组类格式
            - 格式
              ```
              Hardware Type                                   Protocol Type
              Hardware address len    Protocol address len    Operation Request 1,Reply 2
              Sender hardware address(For example, 6 bytes for Ethernet)
              Sender protocol address(For example, 4 bytes for Ethernet,即ip地址)
              Target hardware address(For example, 6 bytes for IP,即ip地址)
                 - 对于需要知道对方mac地址的主机的请求方,这个值填全0,因为正是要获取目的主机的mac,而目前不知道,所以填全0
              Target protocol address(For example, 4 bytes for IP,即ip地址)
              ```

         - ARP 分组顺序
            - ARP 是对于 在同一个物理网内的(即同一个网段内)
            - HType(2 bytes) PType(2) HL(1) PL(1) OP(2) sMAC(6) sIP(4) tMAC(6) tIP(4)
            - ARP 分组直接封装在数据链路帧中
            - 目的mac(6) 源(6) 类型(2) ARP Packet(28)           FCS(4)
                                           |------- 46 ------|(因为最小46字节,所以多的部分填充为0)

   - IP分组 和 ARP 的分组交互
      - ARP 只是对于  在同一个物理网内的交互过程
      - 例子
         - A 和 B 两台主机在同一个物理网内
            - A 向 B 发送一个ip分组,那么会先在 A 中发现路由表信息
            - 发现是直接路由,把目的ip地址(即ipB) 和 ip分组 交给 ARP 模块,ARP 再查询 Cache 中关系表有没有ipB的信息,发现并不存在 B 的 ARP Cache信息(若存在则根据mac发送给目的主机)
            - 那么 ARP 模块封装成了 数据帧当中 的信息 dMAC=广播,Target_IP=ipB 的信息进行广播
            - 这个网络内的所有主机,包括路由 都会接到这个广播请求,并记录了请求者的 ip地址 和 mac地址的 ARP 缓存
            - 收到广播信息的主机B,自己ip是 广播中的 Target_IP 的则 单播响应自己的 mac地址信息
            - 那么A就记录了B的 ARP 映射信息,那么 A 就可以对 B 发送信息
         - A 和 B 两台主机不在同一个物理网内
            - A 和 网关
               - A 向 B 发送一个ip分组,那么会查询路由,发现是间接交互的形式,需要走默认网关
               - 那么 A 会把 下一跳ip地址(和网关相连的网关接口) 和 ip分组 交给 ARP 模块
               - ARP 查询 Cache 有没有关于 下一跳ip地址 和 mac 的关系表,发现没有 则发起了广播
               - 由于广播的 ip地址是 网关的ip地址,所以网关会把相应的自己接口的 mac 地址响应给 A
               - A 接到了信息会把 分组交互给网关
            - 网关会查询 分组的目的ip地址 查询路由,发现要走网关2
               - 同理将查询到的路由表中 要走网关二的下一跳地址进行 查询 ARP,没有则以 下一跳地址作广播,同理拿到 网关2的 mac 进行交付
            - 网关2 和 目的ip主机
               - 网关二对分组数据中的 目的ip地址 进行路由表查询,得到目的ip的主机是直连路由
               - 对目的ip 进行查询 ARP 没有则广播.....
               - 最后得到目的ip的 mac 再将数据进行交付

   - RARP(Reverse Address Resolution Protocol)
      - 概念
         - 可以只对某一个网络接口进行 作代理功能
         - 可能会产生 多个ip地址与一个mac地址的映射关系(而且它会认为不是错误的)
         - 保留网络外部特性,隐藏了内部网络的结构
      - 例子
         ------------------------------路由器---------------------------
         |        |      |             /     \      |         |        |
         .33     .34    .35          .62     .1     .3      .100      .201
         ** 200.6.8.32/27 Hided network*
         ************************* 200.6.8.0/24 Main network *********************
         - 这两个网络有 包含和被包含的关系
         - .3 向 .35 发送数据分组  
            - .3 和 .35 应该间接交互才能访问,但实际上会让 .3 认为 .35 是直接交互的,
            - 因为 .35 的ip地址和 .3 的掩码相与会发现和本网络的网络地址完全一样,所以会以 .35 的ip地址作为 ARP 广播
            - 因为路由器不会转发广播信息,而本网络中没有一个 ip地址是 .35,所以 ARP 失败
         - .35 向 .3 发送数据分组
            - .3 的ip地址在本机路由表中没有找到合适的,所以发送网络路由
            - 把数据分组 和 下一跳地址 给 ARP 并由 ARP 用 那个下一跳地址进行广播
            - 因为那个下一跳地址是路由器接口的ip地址,所以路由器给予反馈
            - .35 把数据分组交付给路由器
            - 路由器通过分组数据的 目的ip地址(即.3的地址)进行路由表查询,查询到了是直连,所以......步骤省略
         - 如果需要 .3 能发送数据分组到 .35 那么需要 路由器对 .1 的接口地址进行一个代理,代理后就会替代.35 把 .1 的mac地址给 .3 然后进行网络路由

      - RARP 操作
         - 用途：无盘机器的引导、动态IP地址配置
      - 分继格式
         - 与 ARP 分组相同
         - Operation: 3-RARP request, 4-RARP reply
      - Ethernet 帧封装
         - 类型：0x8035
      - 操作
         - Request: 广播发送, sIP, tIP不填, sMAC=tMAC
         - Reply: 仅由 RARP 服务器单播发送
      - 讨论
         - 缺点：只能获取 ip地址 进行处理,对域名,掩码,等不能够获取
         - 由于在网络传输中很少使用 广播,所以一般 RARP 由 ICMP 或 Boot?? 代替

* ICMP 协议
   - ICMP 的概念
      - 作为替代 RARP 的协议,因为在互联网中用广播会造成网络负担
      - IP的辅助协议
      - ICMP试图解决 IP传输中出现的问题
      - ICMP报文封装在IP中,只能送到指定目的站
      - 由于 IP的无连接特性,ICMP 只能向源站报告
      - 源站对 ICMP 报告的错误可能无能为力
      - ICMP 在实际中用途较广,但对网络的控制能力较弱
      - 为IP提供差错报告机制,为其它层(TCP/UDP、应用)提供辅助功能
   - ICMP 报文封装
      Frame header   Frame data   Trailer(if any)
                     ----------
                     |
                     ---------> IP heaer    IP data(ICMP message 在IP层数据里面)
   - ICMP 报文 ICMP messages 分为 差错报告 和 测试查询

* UDP 协议
   1. 前言
      - 传输层是存在于进程中的
      - 传输层协议
         - TCP 传输控制协议
         - UDP 用户数据报协议

   2. 概述
      - 无连接,无确认,面向报文单元
      - 报文会丢失,乱序,重复,接收速率快慢不匀
      - 封装在ip报文中,与ip的通信过程相似
      - 应用进程自行考虑UDP不可靠的问题
      - 对IP协议增强
         - 主机多目标通信的区分,允许多个通信并发进行而不会发生混淆

   3. 例子
      端口 2                                     端口 3000
      Client     data 3000 2                     Server
      |    |----------------------------------->|    |
      |<---------------------------------------------|
                 3000 2 data
      此处省略了网络层和其它层的数据,只保留了传输层的案例
      即一端向另一端发数据的时候,源端口在前,其后是目的端口,再然后是数据

   4. UDP 的报文格式
      - IP的报文格式是 IP header       IP data
      - IP data 包含了 UDP Header     Data
      - UDP Header(16bits + 16bits)    Data
         - Header
            - Source port number(16bits)   Destination port number(16bits)
            - Total length(16bits)         Checksum(16bits)
      - UDP 的 Data 部分的最大长度是 65507 = 65535 - 20(ip的头长) -8(UDP的头部长度)
         - 因为ip分组的数据最大是 65535,由于ip分组的头占了20字节,所以ip分组的数据只占了 65535-20,又由于UDP头占8个字节,所以最终UDP的数据部分最大是 65535-20-8=65507

   5. UDP 的校验和
      - UDP的校验和与IP的校验和方法一样,只是内容不一样,UDP的校验和的内容为：伪首部 + UDP首部 + 数据
      - 伪首部
         - 根据 IP 首部的部分信息形成,不与 UDP 报文一起发送到网络上,进一步确保UDP报主席送到正确主机的正确端口上
      - 校验和是可选的,减少高可靠性网络上的传输开销

   6. UDP 的伪首部的格式
      Source IP address                      ---
      Destination IP address                   |-> Pseudo header(伪首部)
      ALL 0s   Protocol UDP   total length   ---
                                             (UDP total length 其实就是下面的 Heaer 也是 65535-20)

      Source port number   Dest. port number ---
      UDP total length     Checksum            |-> Heaer
                Data                         ---


* TCP 协议
   - 概念
      - 提供通用的,可靠的进程到进程的通信服务
      - 提供统一的投递服务接口
      - 虚电路
         - 尽管 IP网络是无连接的,但在TCP的端点上,却可看作是面向连接的通信,端到端的连接
      - 有缓冲的传递,提高传输效率
         - 应用进程：使用自己认为适宜的任何大小的数据片(最小1字节)
         - TCP协议软件：根据网络情况选择适当的收发缓冲区(合并/分割)
      - push：强制滞留数据的发送
   - 说明
      - 采用面向连接的通信方式
      - 滑动窗口协议,以提高通信性能
      - 捎带确认方式
   - 大致流程
      - TCP只有一种报文格式；建立,拆除连接；数据传输；确认,流控,窗口滑动
      - TCP 的连接是指 四个信息：源ip地址和源端口 和 目的ip地址目的端口(只有这四个参数完全一样才能称得上是一个连接)
   - TCP 的报文格式(Header    Data)
      - Heaer内容
         Source port address(16bits)    Destination port address(16 bits)
         Sequence number(32bits)
         Acknowledgment number(32bits)
         HLEN(4bits)    Reserved(6bits) urg(1bit) ack(1bit) psh(1bit) rst(1bit) syn(1bit) fin(1bit)    Window size(16bits)
         Checksum(16bits)    Urgent pointer(16bits)
         Options & padding(0~40bytes)

      - Header 的内容解析
         - Source port address 和 Destination port address 标识应用进程
         - Sequence number 和 Acknowledgment 差错控制,是以字节为单位
            - Sequence number 序列号,以字节为单位,表示的值为数据部分的第一个字节在原本字节流中的序号
            - 例如一个报文段中第一个字节的流序号 为 X ,长度为 L的报文段,则报文掋 序号为 X,下一报文序号为 X + L
         - HLEN 头长；Reserved 保留字段；接下来的6个bit统称“控制字段”；Windows size 窗口字段,窗口字段是和控制字段一起完成流控
         - Checksum校验和字段,和UDP的形成和格式完全一样；
         - 控制字段(报文类型,流控,连接建立和拆除)
            URG 紧急指针有效时才使用
            RST 连接复位
            ACK 当这个标识位为1时,那么 Acknowledgment number 是有效的
            SYN 连接建立
            PSH 对应的推缓冲区的操作
            FIN 连接终止

      - 其它说明
         - 紧急指针 与 带外数据
            - 带外数据
               - 带外数据(out-of-band data, urgent data)
               - 位于数据字段的开始,例如：ctrl-c
               - 不在数据流中排除,直接递交上层
               - 提供快速传递数据的功能 
            - 紧急指针
               - 指向带外数据的最后一个字节
            - 例子
               数据队列: bbb  bbb bbbb     bb
               这里的b表示一个位,然而这个位就是排除的数据bit,空缺的表示数据还没有到来,这些顺序是通过数据报中的序列号排队的
               数据报中的数据: bbbbbbb      bbb           bbbbbb
                   假如第一个数据中有 带外数据,那么带外数据肯定是在这个数据前一部分的,假如带外数据有三位,那么紧急指针肯定是指向
                   数组索引“2”的位置,那么 这个数据块非带外数据部分,和其它没有带外数据的全部数据都会依据序列号排除,而带外数据会
                   直接送往上层协议
               
      - 头信息中Optional
         ```
         选项--------> 单字节------> 无操作
              |             |
              |             |------> 选项结束
              |
              |
              -------> 多字节------> 最大报文段长度
                            |
                            |------> 窗口比例因子
                            |
                            |------> 时间戳
         ```

         - 信息解析
            - 最大报文解析
               - 格式 code(1byte)    Length(1byte)    MSS(2byte)
               - MSS影响网络传输性能
                  - 太大: 降低网络利用率(报文开销)
                  - 太小: 降低网络性能(分片降低成功传输概率)
               - 最佳MSS为
                  - 理论：尽可能长而不分片
                  - 实际：不存在
                  - 通常：发送端按发送接口的MTU来确定
               - 通信双方用MSS选项进行MSS值的协议
                  - 接收方不能处理较长的报文时(如资源不
               - 因为发送方和接收方的物理网内的MTU值不一样,所以在建立连接时就确定了相互之前一致的MSS值

            - 窗口比例因子 
               - 说明
                  - 格式 code(1byte)    Length(1byte)    比例因子(1byte)
                  - 针对高吞量和高时延传输介质   ,增大窗口大小
                     - 新窗口大小 = 首部中定义的窗口大小 * 2^比例因子
                     - 比例因子的最大值是 16
                     - 最大窗口大小 = 2^16 * 2^16 = 2^32
                  - 窗口大小可在数据传输阶段改变,窗口比例因子只能在连接建立阶段确定

               - 样板
                  - 测量往返时间,动态定义超时时间
                  - 格式 
                     ```
                     Code(1byte)    Length(1byte)
                     Timestamp value(4bytes)
                     Timestamp echo reply(4bytes)
                     ```

   - tcp 的功能
      - 主要功能
         - 差错控制: 按序, 无差错, 不丢失、不重复
         - 差错控制
            - 检测: 校验和、确认、超时
            - 纠正: 重传

      - tcp 的确认机制
         - 确认机制: 接收方接收到正确的数据后,向源站回送ACK报文,发送评改理传错误数据(受损报文、丢失报文)
         - 累计确认: ACK number 是接收方希望接收的下一个字节,对ACK nmber 以前的所有字节的确认

      - 超时重传机制
         - 发送方发送数据后为相应的报文启动一个定时器, 直到接到确认消息后再传下一个报文(超时时也会重发送超时的报文)
            - 定时期间,发送方收到确认后,再发送后续数据
            - 定时期满,发送方重传未确认数据
         - 未确认数据
            - 受损或丢失的数据(报文丢失了没有接收到接收方的确认消息而造成的超时情况)
            - 确认丢失的数据(接收方接收到了消息, 但是发送的确认消息在网络途中丢失了, 而造成的超时情况)
         - 发送方在接收到确认消息时会删除对应报文的定时器
         - ********************************************************************************************* 没看懂啊

      - 失序报文段
         - 原因与解决方案
            - 封装TCP报文段的IP数据报的独立传输到达
            - 解决方案
               - 接收方对失序报文段不确认,直到收到所有它以前的报文段为止
               - 若确认晚到,发送方重发失序报文段,接收方丢弃重复的报文段
      - 发送方和网络的利用率
         - 等待确认时, 发送方和网络牌空闲状态
         - 解决方案: 发送方在等待确认期间, 可继续发送多个报文段(滑动窗口机制, 如果不使用此机制则会按报文顺序收到确认后才发送下一个消息)
      - 流控和拥塞控制
         - TCP的流控
            - 收发速率匹配, 防止接收方被数据流淹没
               - 因为接收方是以数据缓冲区暂时存放数据, 如果队列饱和了却仍然有数据过来了, 没有地方放则数据只有丢弃
               - 方法: 收发速率匹配----滑劫窗口协议
            - TCP的拥塞控制
               - TCP的拥塞表现为时延增加
               - 超时重传机制会进一步加重网络拥塞
               - 方法: 减少报文段的发送量

      - 滑动窗口
         - 窗口: 发送方在收到确认前, 其发送缓冲区中可以发送的数据流长度，窗口是对于发送方而言(单位: 报文或字节)
         - 滑动: 随着确认的不断到达, 窗口也不断的向后移动
         - 滑动窗口的动态可变窗口功能(实现流控)
            - 接收方告知发送方 可用缓冲区 的大小, 发送方根据该通告值调整 发送窗口 的大小
            - 优点: 更加有效地传输, 同时还可以控制数据流量
            - 极端情况下, 接收方通告的可用缓冲区大小为0
               - 发送方停止发送
               - 重新开始发送的条件
                  - 收到窗口值不为0的通告
                  - 试探性发送, 预防通告丢失造成的死锁
                  - 带外数据
               - 对于发送方收到 窗口值为0 时会等待一段时间并发送一个 试探性数据(防止死锁)
                  - 如果接收方的缓冲区满时会发送一个可用缓冲大小为0的窗口值, 如果窗口值不为0了, 但是不为0的通告在传输中丢失, 那么
                  - 发送方会一直等待通告造成一直不发数据, 接收方会认为没有数据可发而一直等待, 所以需要发送方有一个试探性数据

      - 超时重传
         - 重传等待确认的数据
            - 根据当前发送窗口, 重新切割和重传报文段
            - 传输在返时延可变, 需动态改变超时时限
         - 动态可变窗口对重传的影响: 重传报文与原报文不一致, 窗口值缩小, 报文长度会减小, 反之, 会增大
         - 接收复原, 离散复原(流序号起重要作用)

      - 滑窗流量讨论
         - 发送缓存、发送窗口、接收缓存
         - 发送方不一定要发送整个窗口大小的数据
         - 窗口大小由接收方调整，实现流量控制
            - 大窗口增加流量
            - 小窗口减少流量
            - 零窗口暂停发送
         - 接收方可在任何时候发送确认(即可以累积确认, 在接收到多个报文时再确认)
         - 可能的问题
            - 窗口机制不会立即起作用(网络缓冲)
            - 无法确切知道和防止网络中间的拥塞
         - 例子
            ```
            例如一个缓冲区里数据依次为 0123456789
            假设窗口的大小是 5, 那么窗口应该包含了 01234,
            那么可以发送的数据是基于 01234中, 上层传递下来的是哪几个，如果上层传下来的顺序是 0 123 4
            那么应该先传递 0, 然后等待确认返回, 确认后将0去掉，窗口向右移动1位,包含住了12345, 
            然后发送 123, 如果确认后再去掉123并向右移动3位,再发送4等待确认。。。依此类推
            注意: 收到确认消息时同时还会得到 接收方的可用缓冲区大小 那么此时会以那个值作为窗口值                       大小即窗口大小值是可变的
            ```

      - 拥塞避免
         - 在不考虑拥塞的情况下, 窗口的大小是接收方的可用缓冲区的大小
         - 滑窗的动态变动只能够解决接收方的问题，而如果是网络拥塞则要考虑网络拥塞的问题
         - 假定报文的丢失都是由网络拥塞引起的
            - 发送窗口大小 = min(窗口通告值，拥塞窗口值，选取窗口通告值和拥塞窗口两者最小的值)
               - 窗口通告值是接收方返给发送方的可用缓冲区大小
         - 方法一: 加速递减
            - 一旦出现丢失报文，则拥塞窗口减半=>按指数递减
            - 发送窗口内数据超时时限加倍=>指数递减重传速率
         - 方法二: 慢启动
            - 拥塞窗口 = 1个MSS时，每收到一个确认，拥塞窗口即发送窗口增加1个MSS(这种情况下窗口通告值不变?)
            - 发送窗口 = 0.5 * 窗口通告值后，窗口中所有报文都被确认后, 拥塞窗口即发送窗口增加1个MSS

      - TCP的糊涂窗口综合症
         - 实际中发现: 通信双方的应用进程以不同速率工作时, 会出现严重的性能问题
         - 糊涂窗口综合症
            - 接收方: 确认报文通告小窗口
            - 发送方: 报文段少量数据
         - 例子: 在极端情况下, 接收端的缓冲队列已经满了而且处理数据很慢, 如果假设接收方一次只收一个字节上去, 那么发送了一个字节的通告窗口大小，那么发送方也只能传输一个字节, 而接收方接收到了一个字节又消费了一个字节又只能返回一个字节的通告窗口值, 依此造成恶性循环, 而成了糊涂窗口综合症的情况
         - 解决方案
            - 接收方的 SWS 避免
               - 推迟窗口通告
                  - 通告零窗口之后, 在接收窗口显著增加之前, 推迟窗口的通告
                     - 达到接收缓冲区的一半
                     - 或达到最大报文段长度
                  - 推迟确认
                     - 推迟确认的发送
                        - 直到窗口值增大到一定程度, 或有数据要发送, 或超时时限快到
            - 发送方的 SWS 避免
               - 收集应用程序的发送数据, 聚焦合理的数据量
                  - 延迟时间
                     - 长 反应变慢(如对话应用程序)
                     - 短 数据量少, 吞率下降
                  - 延迟策略: 根据当前网络性能而定
                     - 自定时方式, 使用确认的到达来触发报文的发送

   - TCP 连接管理
      - 对端点标识: ip1, port1 -- ip2, port2
      - 连接个数受机器内在容量限制, 最多 65535 个
      - 一个机器上某个 TCP 端口号可被多个连接共享
      - TCP 使用随机的初始序号值(双方都需要 知道和确认 对方得到了自己的初始序号)
      - 三次握手的连接
         - 过程
            - Client -> Server(Segment1: SYN, seq: 1200, ack: --)
            - Server -> CLient(Segment2: SYN+ACK, seq:4800, ack: 1201)
            - Client -> Server(Segment3: ACK, seq:1201, ack: 4801)
         - 说明
            - SYN 表示是建立连接
            - 两者为了建立通信，那么过程的说明如下
               1. Segment1 是表示客户端对服务端的连接请求，并告之序列号
               2. Segment2 是服务端对客户端的连接请求响应(同时表示也向客户端请求), 并告知了服务端期望的序列号
               3. Segment3 仅仅是客户端告知服务端自己的期望序列号, 如此两方都知道了对方期望的序列号, 那么就可以进行数据的通信了
                  - 当然, 如果有数据, 那么也可以在第三次握手中把数据发送给 Server

   - TCP 连接拆除管理
      - 连接拆除的发起方只能关闭自己的发送方向
         - 不能发送数据, 可接收数据, 可发送确认
      - 四次握手的拆除连接
         - 过程
            - Client -> Server(Segment1: FIN, Seq: 2500, ack: --)
            - Server -> Client(Segment2: ACK, Seq: 7000, ack: 2501)
            - Server -> Client(Segment3: FIN, Seq: 7001, ack: 2501)
            - Client -> Server(Segment4: ACK, Seq: 2501, ack: 7002)
         - 说明
            - FIN 表示拆除连接请求
            - 因为 TCP 是双向连接, 所以要拆除连接, 需要双方都拆除连接信息
               1. 客户端向服务端发起拆除连接请求
   - 连接复位
      - 连接复位(reset)
         - 异常中断连接
         - 快速关闭连接, 无确认
      - 发出RRST = 1 的报文, 立即中止连接(双向)
      - 收到RRST = 1 的报文, 立即中止连接(双向)

* 路由协议
   - 一致性: 网络当中所有路由器对所有路由器和网络拓扑是否是一致的 
   - 及时性: 网络拓扑协议发生动态改变时，路由器是否可以根及时更正
   - 选路准则 -- 最短路径
   - Metric
      - Metric(度量): 衡量路径的长短
         - 跳数(经过路由器的数目, hop count)
         - 带宽(handwidth), 延迟(delay), 负载(load), 开销(cost)...
      - 不同的 Metric 产生不同的“最短路径”
      - 不同的路由协议采用不同类型的 Metric；一个路由协议可同时应用多重 Metric(即一个Metric可以由多个衡量组合表示)

   - Convergence(收敛)
      - 采用特定路由协议的所有路由器对整个网络拜年具有一致性的认识
      - 收敛时间
         - 从不一致到一致所经历的时间
         - 体现路由算法的效率

   - AS(Autonomous System)自治系统和内、外部路由协议
      - 自治系统
         - 处于一个管理机构控制下的网络和路由器的集合
         - AS 使管理机构可自主选择其内部路由方式和对外通告部分可达性信息的权利
         - 每个 AS 赋予一个 AS 编号
            - 由负责分配 Internet 地址的中央管理机构统一分发
            - 取值: 1~65535
      - Internet 由若干个 AS 互相连接构成
         - 每个 AS 内可能有多个网络存在
         - 核心主干网也可以构成一个 AS
   
         
   - AS 类型
      ```
      AS1 -------- AS2
      |
      |
      AS3
      Single homed AS: 只有一个出口, 如: AS2 AS3
      Multi-homed AS: 有多个出口, 如: AS1
         - Nontransit AS(非中继路由, 造成 AS3 和 AS2 不能通信)
         - Transit AS(中继路由, 造成 AS3 和 AS2 可以通信)
      ```
   - EGP vs. IGP
      - EGP 和 IGP 从功能上是网络层, 软件实现上是应用层
      - Exterior Gateway Protocol(外部网关协议)
         - 由 AS 边界路由器在 AS 间通告可达性信息
         - 目前常用协议: BGP-4
      - Interior Gateway Protocol(内部网关协议)
         - AS 内部路由器在 AS 内通告内部网络细节
         - 目前常用协议: RIP、OSPF、IS-IS

   - 距离微量路由算法原理
      - 路由器周期性地把自身的整个路由表发到直连的路由上，然后进行数据交换计算更新路由表(收到信息的路由也会计算和更新自己的路由表)
         - 这里的所谓的整张路由表指的是将路由表当中所有的表项或每一条路径发送出去

   - RIP & OSPF
      - RIP(Routing Infomation Protocol)
         - 内部路由协议, 距离微量路由算法(D-V)
         - 距离矢量算法
         - RIP, RIPv2
      - OSPF
         - 内部路由协议, 链路状态路由算法(L-S)
         - 链路状态路由算法
         - OSPFv2
      - 原理
         - RIP
            - RIP 协议规定, 网络不可达的路径跳数是 16 跳, 所以跳数的最大值是 15
            - 广播发送: 255.255.255.255
            - 封装在 UDP 报文中: UDP port = 520
               ```
               command    Version    All 0s(保留字段)
               Family    All 0s
               IP address
               All 0s
               All 0s
               Metric
               最下面的四行, 每行 4 个字节, 一共 20 字节, 并且这四行就形成了路由表的一条信息
               最下面的四行, 一共可以重复 25 次, 即 RIP 发出的通告信息只能有 25 个目的网络地址的询问
               之所以是 25 个是因为 ip 层的限制, 假如有 50 条路由表项, 则要封装两个 RIP 报文发出去
               ```
            - RIP 的报文类型
               - Request(Command = 1)
                  - 路由器刚接入网络, 或某些路由表项超时
                  - 请求所有路由表项(IP address = 0.0.0.0)
                     - 一般是刚接入网络发起的ip询问
                  - 请求部分路由表项(IP address = 网络地址)
                     - 一般是某个路由超时时, 接收到这种指定路由则把自己路由表中这个ip的信息进行响应

               - Response(Command = 2)
                  - 询问响应: 应答 RIP Request 报文
                     - 这是接收到 Request 报文的响应
                  - 非询问响应: 定期发送路由表中的所有路由信息
                     - 这是周期性地发送自己的路由表给邻近的路由器

               - 路由协议的交换路由表说明
                  1. 路由协议相当于是 把当前路由到指定网络所要经过的路由跳数的路由表记录进行通告
                  2. 实质就是告诉其它路由器自己到其它路由会经过多少跳数
                  3. 之所以要加一和不加一再发送通告的原因
                     - 加一后发送通告再直接和别的路由器旧路由比较(此时先加一表示要经过某个网络是要先经过本路由器的, 所以加一)
                     - 不加一直接发送通告, 接收者接收到后再加一进行和自己的旧路由表进行比较(因为接收到路由后要到达某个网络要经过本路由器, 所以要加一)
                  4. RIP 协议选择的是先加一再发送通告, 由其它路由器接收到后直接比较

               - RIP 协议的更新算法
                  ```
                  if ( ip address 不在路由表中)
                     根据该报文添加新路由表项
                  else
                     if (路由表对应表项的下一跳 == 通告路由器)
                        根据该报文修改路由表中的对应表项
                     else
                        if (Metric < 本路由表对应表项的跳数)
                           根据该报文修改路由表中的对应表项
                        else
                           不修改路由表中的对应表项
                        fi
                     fi
                  fi
                  ```
            - 例子
               ```
               RIP message from C    RIP message from C after increment 
               Net2 4                Net2 5
               Net3 8                Net3 9
               Net6 4   =====>       Net6 5
               Net8 3                Net8 4
               Net9 5                Net9 6

                                      |
                                      |
                                      v
               Old routing table                         New routing table
               Net1 7 A            ____________          Net1 7 A
               Net3 2 C            |          |          Net2 5 C
               Net6 8 F  =====>    | Updating | ====>    Net3 9 C
               Net8 4 E            |__________|          Net6 5 C
               Net9 4 F                                  Net8 4 E
                                                         Net9 4 F
               Net1: No news, don't change
               Net2: Same next hop, replace
               Net1: Different next hop, new hop count smaller, replace
               Net1: Different next hop, new hop count the same, don't change
               Net1: Different next hop, new hop count larger, don't change

               这里假设 Metric 为经过的跳数, 上面一排是B收到C的信息, 之所以要加1是因为从C到B要经过一跳
               第一列表示网络, 第二列表示Metric值, 第三列表示Metric的来源(即这个路由器的直连路由器)
               下面一排表示 B 路由器, 上面一排表示 C 发送给 B 路由器的Metric信息
               Net1: 因为在路由表中没有, 所以新增
               Net2: 因为这个网络是由C到达的, 刚好接收到的路由信息是C发过来的, 所以相当于是更新, 所以取 5 并且来源变为 C
               Net3: 因为在旧路由表中没有, 所以新增
               Net6: 因为Metric来源不同, 所以要比较Metric, 因为到达Net6经过路由C更短, 所以取 C 并且来源变为 C
               Net8: 因为Metric来源不同, 所以要比较Metric, 因为值都一样, 所以取谁的无所谓, 所以不变
               Net9: 因为Metric来源不同, 所以要比较Metric, 因为到达Net9经过F路由器跳数少些所以取 4 并且来源变为 F
               ```
            - 例子2
               ```
               目的网络 下一跳 发送接口 Metric

               下面有路由器和网络形成的网络链
                N1     N2     N3     N4
               -----A------B------C-----
                   1 2    1 2    1 2
               ```
               
               第一步启动时会有个推导路由
               在形成推导路由后会把自身的路由表项发给邻近的路由器, 这里简写为:(网络,Metric)
               这里自己的路由是直联网络, 但是发给其它的是加一后的, 因为代表的意义是经过自己
               后到达对应网络经过的跳数, 所以加了一
               (N1,1),(N2,1)          (N2,1),(N3,1)         (N3,1)(N4,1)
               N1  -  1  -            N2  -  1  -           N3  -  1  -
               N2  -  2  -            N3  -  2  -           N4  -  2  -
                                                                        
               第二步进行路由的交换(因为路由不一致, 所以路由还未收敛)
                                      A(N1,1),(N2,1)               
               B:(N2,1),(N3,1)        C(N3,1),(N4,1)        B(N2,1)(N3,1)  
               N1  -  1  -            N2  -  1  -           N3  -  1  -
               N2  -  2  -            N3  -  2  -           N4  -  2  -
                                                                      
                    |                      |                     |   
                    v                      v                     v   
                                                                  
               N1  -  1  -            N2  -  1  -           N3  -  1  -    
               N2  -  2  -            N3  -  2  -           N4  -  2  -  
               N3  B1 2  1            N1  A2 1  1           N2  B2 1  1  
                                      N4  C1 2  1                     
                                                                      
               第三步继续进行交换, 注意: 自己本身的直连路由仍然是从0自增1然而发送,
               其它非直连的需要在本身记录的情况下自增1然后发送(因为同理要经过自身然后到达目的网络,
               所以要加1跳)                                                      
               B:(N2,1)(N3,1)         A:(N1,1)(N2,1)(N3,2)  B:(N2,1)(N3,1)
                 (N1,2)(N4,2)         C:(N3,1)(N4,1)(N2,2)    (N1,2)(N4,2)
               N1  -  1  -            N2  -  1  -           N3  -  1  -    
               N2  -  2  -            N3  -  2  -           N4  -  2  -  
               N3  B1 2  1            N1  A2 1  1           N2  B2 1  1  
                                      N4  C1 2  1                     

                    |                      |                     |     
                    v                      v                     v      

               N1  -  1  -            N2  -  1  -           N3  -  1  -    
               N2  -  2  -            N3  -  2  -           N4  -  2  -  
               N3  B1 2  1            N1  A2 1  1           N2  B2 1  1  
                                      N4  C1 2  1                   

               第四步继续交换, 直到所有的路由信息都没有得到更改时才路由收敛
                 
            - RIP 定时器
               0. 每一条动态路由表项都有自己独有的定时器(即路由表中每一条信息都有自己的定时器)
               1. Periodic 30 seconds(周期定时器, 周期性地发送定时报文, 是发送路由表中的所有路由项, 为了防止所有路由器同时更新引起的网络过载, 定时器Periodic值为25~30秒间的一个随机数)
               2. Expiration 180 seconds(路由表中信息的生存时间, 过期后则标识为过期, 但是并不物理删除)
               3. Garbage collection 120 seconds(垃圾收集定时器, 当路由表中信息超时后经过120秒才会物理删除) 

      - RIP 的缓慢收敛
         - 路由环路
         - 无限技术
         - 解决方法(没有一种是百分之百的有效, 只能说是抵制)
            - 触发更新 Triggered update
            - 水平分割 Split horizons
            - 毒性逆转 Poison reverse
            - 抵制定时器 Hold down timer
         - 解决方案的详解
            - 触发更新
               - 如果网络中没有变化, 定时(30s)发送所有路由信息
               - 如果网络中有变化, 立即发送更新后的所有路由信息, 为避免触发广播风暴, 随机延时后再通告
            - 水平分割
               ```
               <= Net2 1 | Net1 =>
               <= Net3 2 |
                         |
               Net1------A------Net2------B------Net3
                                          |
                                          | Net1 2 =>
                                <= Net3 1 | Net2 1 =>
               即 某个网络是来源于本路由器的某个接口, 那么在通告时在这个接口上就不发送这个网络了 
               但是 在网络拓扑改变时仍然可能发生路由环路的问题, 比如 Net3 后面接了一个 Net4
               ```
            - 毒性逆转
               ```
                <= Net1 16 | Net1 1
                <= Net2 1  | Net2 16
                <= Net3 2  | Net3 16
               Net1--------A--------Net2--------B--------Net3
                                        Net1 16 | Net1 2
                                        Net2 16 | Net2 1
                                        Net3 1  | Net3 16

               即 某个网络是来源于本路由器的某个接口, 那么在通告时在这个接口上发送出去的这个网络的
               Metric 就为16(即无限不可达), 而其它的按标准发送 
               ```
            - 抵制定时器
               - 路由器在收到关于某网络不可达信息后的一段固定时间内, 忽略任何关于该网络的路由信息
                  - 只有通告的路由器是相同的下一跳才更新, 否则即使是有更小的 Metric 也不更新

      - RIPv2
         - RIP 只能适用于固定掩码的情况, 不适用于变长掩码的情况, 因为通告中没有指明到底怎样到达的
            - 然而在 RIPv2 中已经解决了这个问题, 可以用于变长掩码技术的网络中
         - 报文格式
            ```
            Command    Version    All 0s
            Family    Route Tag
            IP address
            Subnet Mask
            Next Hop
            Metric

            Route Tag 和 Subnet Mask 和 Next Hop 和 Metric 是把 RIPv1 的保留字段拿来使用
            认证: Family = 0xFFFF
            组播发送 RIP 报文: 224.0.0.9
            ```

      - OSPF(Open Shortest Path First, OS)
         - 开放最短路径优先
         - 直接使用 ip 提供的网络层服务, 但是应用是放在应用层
         - 使用的 89 端口, 报文直接封装在 ip 报文中进行发送的

         - 一些术语
            - 区域
               - 包含在 AS 中的一些网络、主机和路由器的集合
               - 类型: 标准区域(Standard)、主干区域(Backbone)、残术桩区域(Stub)
               - 不同区域的简述
                  - 标准区域: 可能有多个出口往其它区域
                  - 主干区域: 作为主要的区域, 并且是作为主要的大区域向其它大区域的输出主干
                  - 残术桩区域: 只有一个出口往其它区域
            - 路由器的区别
               - IR 内部路由器(Internal Router)
               - BR 主干路由器(Backbone Router)
               - ABR 区域边界路由器(ABR, Area Border Router)
               - ASR AS边界路由器(ASBR, AS Border Router)
            - 链路
               - 不同类型的链路
                  - 点到点链路(Point-to-Point link)
                  - 过渡链路(Link to transit network)
                     - 指定路由器发送的路由通告, 其它非指定路由器都能收到
                     - 非指定路由器发送的路由通告, 只有指定路由器才能收到, 其它非指定路由器收不到
                     - 邻接表中只有一台路由器信息, 就是它们的 DR 路由器; DR 路由器的邻接表中中存放所有非 DR 路由器信息
                  - 残桩链路(Link to stub network)
                  - 虚链路(Virtual link)
               - 各链路的解释
                  - 点到点链路
                     ```
                     A-----B
                     ```
                  - 过渡链路
                     ```
                         A    B                A           B
                         |    |                 \         /
                     --------------             Frame Relay X 25
                       |    |    |              /          \
                       C    D    E             C            D
                     ```
                  - 残桩链路
                     ```
                          A
                          |
                     ------------
                     ```
                  - 虚链路
                    ```
                    Area1--A--Area2--B--Area0--C--Area3
                    因为所有到外部的网络必须经过 Area0 到外部,由于Area1到Area0由于地理或其它原因
                    不能直接相连, 所以 A 和 B 之间会有一条专线, 通过这样的代理方式到外部
                    ```
            - DR 和 BDR
               - 只有过渡链路才存在 DR 和 BDR 的情况
               - DR: Designated Router 指定路由器
               - BDR: Backup DR 备份路由器
               - 例子
                  - 无 DR 总共 N*(N-1) 条 LS
                     - 因为每个路由器有 N-1 个邻居, 那么一个路由器就要发 N-1 个通告, N个就发 N*(N-1)
                  - 有 DR 总共 2*(N-1) 条 LS
                     - 即N中选举了一个路由器作为 DR, 其它都是 非DR
                     - DR 有N-1个邻居(即非DR), 共计通告 N-1 条LS
                     - 非DR 仅有1个邻居(即DR), 仅通告1条LS, 非DR 要发送的总量为 N-1
                     - 所以最终结果要发送的通告数为 2*(N-1)
               - 作用: 减少过渡链路上的路由开销, 例过渡链路上有 N 个路由器

         - OSPF 分组格式
            - 组播发送: 224.0.0.5, 224.0.0.6
               - 224.0.0.5
                  - 针对所有的 OSPF 的路由器
               - 224.0.0.6
                  - 针对所有的 OSPF 的指定路由器
            - 封装在 IP 分组中: IP Protocol = 89
            - 格式
               ```
               Version    Type    Packet Length
               Router ID
               Area ID
               Checksum    Authentication Type
               Authentication
               Authentication
               OSPF Packet Data

               前 6 行是首部
               Version版本, Type OSPF分组类型, Packet Length整个OSPF的分组长度
               Router ID路由器标识(当前发送这条OSPF的路由器的标识, 即这个路由器某个接口的ip地址, 这个ip地址是在路由器的接口当中选择的一个, 一般是选择ip地址值最大的那个, 不管OSPF分组数据从这个路由器的哪个接口发送出去, 但是在OSPF分组中的 Router ID 都是一样的, 这样就造成了和ip分组中的源ip地址可能不一样的可能, 注意一个路由器只有一个 Router ID)
               Area ID当前发送这个 OSPF 分组的路由器所属的区域的唯一标识
               Checksum校验和    Authentication Type认证类型
               Authentication 认证的内容
               Authentication 认证的内容
               
               ```

         - OSPF Tables
            - 邻接表(Adjacency Table)
               - 存放所有与之建立双向通信的邻居路由器信息
            - 链路状态数据库(Link-State DB)
               - 存放本区域中的所有链路状态信息
               - 同区域内所有路由器的 LS DB信息是相同的
            - 转发表(Forwarding Table)
               - 路由表, 存放所有经 SPF 算法获得的最短路由
         - OSPF 邻居状态
            - Down 初始状态, 不能交换任何的路由信息
            - init 当一个接口收到第一个 Hello 信息时
            - 2-way 他发现自己在对方的 Hello 信息中存在(意味着两者的邻接关系建立完毕)
            - ExStart 交换路由状态开始
            - Exchange 双方已确认都收到路由的状态交换请求
            - Loading 双方都把路由包发给对方, 并且双方都确认的情况下(如果没有确认则会重发路由包)
            - Full 两者的路由信息已经交换完毕
         - OSPF 分组类型
            1. Hello packet 一个 64-byte 的用来建立邻接关系, 要么用来保持邻接关系的存活性的包(相当于是发送心跳, 但是这个包只能用于这两个作用, 不能用于发送数据)
            2. DBD(Database Description) 链路状态的一个简单的概要信息
            3. LSR(Link-State Request) 链路状态请求
            4. LSU(Link-State Update, LSA) 链路状态更新
            5. LSAck(Link-State Acknowledgement) 链路状态确认信息
         - OSPF LSA 类型
            - Type1: Router-LSA 在本区域内发布所有邻居及其所在链路的信息
            - Type2: Network-LSA 由DR在本区域内发布其所在过渡网络上其他路由器信息
            - Type3: Summary-LSA 由ABR产生, 在本AS内的所有区域中发布到达其他区域某网络的路径信息
            - Type4: Summaray-LSA 由ABR产生, 在本AS内的所有区域中发布到达ASBR的路径信息
            - Type5: AS-external-LSA 由ASBR产生, 在本AS内的某些区域中发布到达AS以外网络的路径信息
         - OSPF 的操作步骤
            1. Establish router adjacencies
            2. Elect the DR / BDR(if necessary)
            3. Discover routes
            4. Select appropriate routes
            5. Maintain routing information
         - SPF 算法
            ```
                             6
               B ----------------------------C
             2/ \2           1             3/ \3
             A   E ----------------------- F   D
             7\ /2           4             2\ /2
               G --------------------------- H

               数字表示路径之间的开销, 也就是图算法的权
               
            假设以 A 作为出发点, 计算最小生成树, 因为是树, 所以不会形成环路
            直连的可以立即计算出权的大小, 非直连的会开始是无穷, 通过计算后得出所有的链路
            节点    Cost          路径
             B       2            A-B
             C       无穷,8,8     A-B-C, A-B-E-F-C
             D       无穷,9,11    A-B-E-F-H-D, A-B-C-D
             E       无穷,4       A-B-E
             F       无穷,5       A-B-E-F
             G       7,6          A-G, A-B-E-G
             H       无穷,7,10    A-B-E-F-H, A-B-E-G-H
            ```

* BGP-4 协议
   - 概念
      - Border Gateway Protocol, BGP
      - v4: RFC 1771, RFC 1772, 边界网关协议
      - 使用的端口是 179, 并且是建立在 TCP 上的传输
   - 特点
      - 外部网关协议
      - 策略路由
      - 可靠传输
      - 路径微量路由选择
      - 增量更新
      - 支持 CIDR
      - 路由聚合
      - 认证
   - 路径向量路由选择
      - 分组到达目的站所必须经过的路径: AS有序表
      - 例子
         ```
         Network    Next Router    Path
         N01        R01            AS14,AS23,AS67
         N02        R05            AS22,AS67,AS05,AS89
         N03        R06            AS67,AS89,AS09,AS34
         N04        R12            AS62,AS02,AS09
         ```
   - EBGP 是发生在不同自制系统边界的连接
   - IBGP 是发生在同一个自制系统的不同边界的连接
   - BGP 报文
      ```
      首部报文
      Maker(认证或同步, 16 bytes)
      Length    Type
      ```
   - 类型
      - OPEN: 建立对等关系
      - OPDATE: 通告或撤消路由
      - NOTIFICATION: 对错误情况的汇报
      - KEEPALIVE: 定期测试对等路由器的连接性

* Client 和 Server
   - 循环 vs. 并发
      - 循环处理请求的服务: UDP
         - 在客户端的请求, 服务端会依次处理
      - 并发处理请求的服务: TCP
         - 在客户端的请求, 服务端会并发处理
   - BOOTP vs. DHCP
      - BOOTP(BOOTsTRAP Protocol)
         - 引导无盘计算机或第一次启动的计算机
            - 主机ip地址、掩码；网关ip地址；DNS服务器ip地址
         - C/S 协议
            - Client: UDP 68端口；Server: UDP 67 端口
      - DHCP(Dynamic Host Configuration Protocol)
         - BOOTP的控充和增强, 与 BOOTP 向后兼容
         - 在有限期间提供临时的静态或动态配置
            - 静态数据库
            - IP地址池

* 域名
   - 域名是对ip地址的映射, 且域名是用多个“.”分隔的标号序列(节点->根)
      - 每个标号最多有 63 个字符
   - 实现
      - DNS 报文: 查询报文, 响应报文
      - TCP 53 端口(响应报文长度 > 512 字节)
      - UDP 53 端口(响应报文长度 <= 512 字节)
   - 方法: 递归解析、迭代解析




进度：32 集
******************************** 韩立刚教程 ********************************
   - 概要
      1. 注意
         - 当网络连接信息中有发送和接收，如果一个数据为0另一个不为0可能是线有问题，因为网线内部有八根，四根发送数据，四根接收数据，可能是其中的一种出现问题
         - 网络通信需要通信速率要匹配才行，一般使用自动侦测
      2. 连接方式
         - C/S连接方式：所有的交互只能是 server 和 client 之间
         - p2p连接方式：假如 s 是服务端，c1,c2,c3,...等是客户端，c1在s中下载了部分数据，c2虽然也向s下载，但是c1已经下载好了部分，所以那部分也可以作为c2的源，同理c2也可以把下载的作为c3或其它的源下载
            - 下载的越多就越快
      3. 数据交换
         - 电路交换：某两个进行通信的时候，都向中心机进行申请，那么中心机会在逻辑上建立连接，一旦连接，在释放前其它不能和已经连接的客户端通信（客户端到客户端中间的连接线程是固定的）
            - 适合于数据量很大的实时性传输，核心路由器之间可以使用电路交换
         - 报文交换：报文分组比分组长，时间也比分组交换长，而且报文交换是一次性传输完
         - 分组交换：把要发送的数据分成几组，每组进行包装为报文且有标明序号，每个组在发送的线程不一定相同，在客户端进行接收并根据序号组装解析
      4. 名词解释
         - 信道：计算机在执行多个任务，每个任务与服务端之间都有传输的速率，各个传输的速率称为各个信道
         - 吞吐量：指单位时间内，进出数据量的总和
         - 时延：
            - 发送时延=数据块长度（比特）/信道带宽（比特每秒）
            - 传播时延=信道长度（米）/信号在信道上的传播速率（米/秒）
            - 处理时延=

   - 数据链路层

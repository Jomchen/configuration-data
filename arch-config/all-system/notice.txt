* Win 和 Linux 双系统时间同步解决方案
   - win 和 Linux 双系统时间同步解决方案
     - https://wiki.archlinux.org/index.php/System_time
     - 或者搜索 `System time arch` 搜索到双系统的时间解决方案

* 域名
   - godaydy www.godaddy.com
   - namesilo www.namesilo.com
      - https://www.namesilo.com/register.php?rid=775dd38gf
* wall remote proxy tools 
   - TEACH WEBSITE => https://www.v2rayssr.com/tag/trojan
   - [ BBR 可以为代理服务器提速 ]
   - v2ray
      - 是一个系统体系
   - wireguard
      - 官方地址 www.WireGuard.com www.wireguard.com
      - 国内教程地址 http://www.lixh.cn/archives/2134.html
      - 基于 udp 协议传输
   - Trojan（在 v2ray 的官方文档有提到使用方法）（本身定位于加密为 https, tls 1.3）
      - 基于伪装为 https 协议传输
   - Tor 洋葱路由器，匿名通信的Free软件
   - Brook
   - ssr
* 系统网络全局代理
   - Surge
   - Clash

* 下载证书后，将 key 与 证书安装在 nginx 上后，nginx -t 验证不通过,错误形同如下
   ```
   报错nginx: [emerg] SSL_CTX_use_PrivateKey_file("/etc/nginx/ssl/myxxxxgame201904.key") failed (SSL: error:0906D06C:PEM routines:PEM_read_bio:no start line:Expecting: ANY PRIVATE KEY error:140B0009:SSL routines:SSL_CTX_use_PrivateKey_file:PEM lib)
   ```
   ```
   解决方案是因为编码问题，用 vim 分别打开 证书 与 私钥，并执行
   :set fileencoding=cp936
   :wq!
   微软的CP936通常被视为等同为GBK，连IANA也以CP936为GBK之别名，但是事实上比较起来
   GBK定义的字符较CP936多出95字（15个非汉字及80个汉字）
      CP936就是 GB2312
   两个文件修改编码后即可验证成功
   原因是证书与私钥必须以 ANSI 编码，而不能用 utf-8
   ```

* Arch 上数据库视图工具不能记住密码的解决方案（此方案仍不能解决问题）
   - 解决 Arch 上 数据库视图工具不能记住密码的解决方案
      - pacman -S seahorse      # 参考 keyring Arch 维基文档
   - 解决 Arch 上 mysql-workbench 报 org.freedesktop.secrets was provided by any .service files 的异常
      - pacman -S gnome-keyring libsecret
   - 经测试，此操作仍然无效

* Linux 中用 wine 安装 qq 方案
  - https://wiki.archlinux.org/index.php/Tencent_QQ_

* git 解决每次拉取代码都需要用户名和密码的情况
   - git config --global credential.helper store
   - 执行完毕后会在 ~/.gitconfig 中生成一个文件，记录了你的相关信息

* yay 安装教程地址
   - https://lyzhang.me/post/archlinux_beginning/
   - https://zhuanlan.zhihu.com/p/102529503
   - https://www.jianshu.com/p/4444bb4f8452

* 安装 redis 因为访问谷歌下载地址失败的处理方案，让 git 走代理
   1. 方案择其一（经测试，第一种方案有效，第二种方案无效，第三种方案未测试，第四种方案未测试。建议用第一种方案）
      1. 设置 socks5 代理
         - git config --global http.proxy 'socks5://127.0.0.1:1080' && git config --global https.proxy 'socks5://127.0.0.1:1080'
      2. 设置 git@ 走代理
         - ~/.ssh/ssh_config
         - ProxyCommand nc -x 127.0.0.1:1080 %h %p
         - 如果不确定，或希望全部走代理，则添加第一行
      3. 设置 http/https 代理
         - git config --global https.proxy http://127.0.0.1:1080 && git config --global https.proxy https://127.0.0.1:1080
      4. 强制转换协议以使用代理
         - git config --global url."https://github".insteadOf git://github
         - git config --global url."git@github.com:".insteadOf "https://github.com/"
         - git config --global url.ssh://git@bitbucket.org/.insteadOf https://bitbucket.org/
   2. 取消代理
      git config --global --unset http.proxy && git config --global --unset https.proxy

* lightdm 配置 vnc
   - lightdm 服务需要开机启动
   - 配置vnc服务端
   ```
   [VNCserver]
   enabled=true
   command=Xvnc -rfbauth /etc/vncpasswd
   port=5900
   listen-address=0.0.0.0
   width=1024
   height=768
   depth=24

   # 注意！！如果客户端远程连接出现 End of stream 的错误则可能是 depth 没有设为 24 的原因
   # 注意！！depth 具体是什么参数视情况而定，至少目前测试默认可能是 8，需要改为 24 可以正常工作
   ```

* Linux 中 disown, &, nohup 命令区别
   - https://blog.csdn.net/weixin_39833509/article/details/98893293

* 配置网卡的教程
   - https://www.cnblogs.com/w-s-y/p/9498115.html

* idea 不能下载源码的解决方案
   - https://www.icode9.com/content-1-116950.html

git 解决每次拉取代码都需要用户名和密码的情况
   - git config --global credential.helper store
   - 执行完毕后会在 ~/.gitconfig 中生成一个文件，记录了你的相关信息
